dotnet new webapi -o Glossary
dotnet run
curl --insecure https://localhost:5001/weatherforecast

####### Delete GlossaryItem, Glossary Conroller file ########
##### Add the new file as %%%%%%

#####GlossaryItem.cs

namespace Glossary
{
    public class GlossaryItem
    {
        public string Term {get;set;}
        public string Definition {get;set;}
    }
}

#####GlossaryController.cs #######

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.IO;
namespace Glossary.Controllers
{
	[ApiController]
	[Route("api/[controller]")]
	public class GlossaryController:ControllerBase
	{
		private static List<GlossaryItem>Glossary=new List<GlossaryItem>
		{
			new GlossaryItem
		{
		Term="HTML", Definition="HyperText Markup language" 
		},
		new GlossaryItem
		{
		Term="MVC", Definition="Model View Control" 
		},
		new GlossaryItem
		{
		Term="OpenID", Definition="An Open Standard For Autehntication" 
		}
	};
	[HttpGet]
	public ActionResult<List<GlossaryItem>>Get()
	{
		return Ok(Glossary);
	}
	[HttpGet]
	[Route("{term}")]
	public ActionResult<GlossaryItem>Get(string term)
	{
	var glossaryItem=Glossary.Find(item=>item.Term.Equals(term,StringComparison.InvariantCultureIgnoreCase));
		if(glossaryItem==null)
	{return NotFound();
	}else
	{
		return Ok(glossaryItem);
	}
	}
	[HttpPost]
	public ActionResult Post(GlossaryItem glossaryItem)
	{
	var existingGlossaryItem=Glossary.Find(item=>item.Term.Equals(glossaryItem.Term,StringComparison.InvariantCultureIgnoreCase));
	if (existingGlossaryItem!= null)
	{
		return Conflict("Cannnot create the term because it already exists");
	}
	else
	{
		Glossary.Add(glossaryItem);
		var resourseUrl=Path.Combine(Request.Path.ToString(),Uri.EscapeDataString(glossaryItem.Term));
		return Created(resourseUrl,glossaryItem);
	}
	}
	[HttpPut]
	public ActionResult Put(GlossaryItem glossaryItem)
	{
	var existingGlossaryItem=Glossary.Find(item=>item.Term.Equals(glossaryItem.Term,StringComparison.InvariantCultureIgnoreCase));
	if (existingGlossaryItem==null)
	{
		return BadRequest("Cannnot update a non existing Term");
	}
	else
	{
	existingGlossaryItem.Definition=glossaryItem.Definition;
	return Ok();
	}
	}
	[HttpDelete]
	[Route("{term}")]
	public ActionResult Delete(string term)
	{
	var glossaryItem=Glossary.Find(item=>item.Term.Equals(term,StringComparison.InvariantCultureIgnoreCase));
	if(glossaryItem==null)
	{
		return NotFound();
	}else
	{
		Glossary.Remove(glossaryItem);
		return NoContent();
		}
		}
		}
		}

*********CMD*****
curl --insecure https://localhost:5001/api/glossary

curl --insecure https://localhost:5001/api/glossary/MVC

curl --insecure -X POST -d "{\"term\": \"MFA\" , \"definition\":\"An authentication process.\"}" -H "Content- Type:application/json" https://localhost:5001/api/glossary

curl --insecure -X PUT -d "{\"term\": \"MVC\" , \"definition\":\"Modified record of Model View Controller.\"}" -H "Content-Type:application/json" https://localhost:5001/api/glossary

curl --insecure --request DELETE â€“url https://localhost:5001/api/glossary/OpenID
